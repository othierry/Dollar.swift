# Script to generate AutoCurry.swift file
# Modify the constant below if you need to curry a function with more than 10 arguments
MAX_AUTO_CURRY_ARG_COUNT = 10

f = Struct.new(:modifiers, :name, :generics, :args, :return_type)
functions = [
f.new("public class", "after", "T, E", "n: Int, function: ((T...) -> E)", "((T...) -> E?)"),
f.new("public class", "map", "T : CollectionType, E", "collection: T, transform: ((T.Generator.Element) -> E)", "[E]"),
f.new("public class", "reject", "S: SequenceType", "collection: S, rejectElement: ((S.Generator.Element) -> Bool)", "[S.Generator.Element]"),
f.new("public class", "reject", "C: CollectionType", "collection: C, rejectElement: ((C.Generator.Element) -> Bool)", "[C.Generator.Element]")
]

def curry_generator(n)
  types = (1..n).map{|i| "T#{i}" }.join(", ")
  return_type = (1..n).map{|i| "T#{i}"}.join(" -> ")
  closures = (1..n).map{|i| "{ t#{i}"}.join(" in ")
  closing_braces = (1..n).map{ "}" }.join(" ")
  [
    "    public class func curry<#{types}, R>(f: (#{types}) -> R) -> #{return_type} -> R {",
    "        return #{closures} in f(#{types.downcase}) #{closing_braces}",
    "    }"
  ].join("\n")
end

def generate_curried_function(func)
  args = func.args.split(',').map { |arg| arg.split(":") }
  [
  "    #{func.modifiers} func #{func.name}<#{func.generics}>(#{args.first.join(':')}) ->#{args[1..-1].map(&:last).join('-> ')} -> #{func.return_type} {",
  "        return curry(#{func.name})(#{args.first.first})",
  "    }"
  ].join("\n")
end

def generate_flipped_function(func)
  args = func.args.split(',').map { |arg| arg.split(":") }
  [
  "    #{func.modifiers} func #{func.name}<#{func.generics}>(#{func.args.split(',').reverse.join(',')}) -> #{func.return_type} {",
  "        return flip(#{func.name})(#{args.reverse.map(&:first).join(', ')})",
  "    }"
  ].join("\n")
end

def generate_flipped_and_curried_function(func)
  args = func.args.split(',').map { |arg| arg.split(":") }
  [
  "    #{func.modifiers} func #{func.name}<#{func.generics}>(#{args.last.join(':')}) ->#{args.reverse[1..-1].map(&:last).join('-> ')} -> #{func.return_type} {",
  "        return curry(flip(#{func.name}))(#{args.last.first})",
  "    }"
  ].join("\n")
end

funcs = [
  "// This is an autogenerated file. Do not edit this file manually.",
  "extension $ {",
    (2..MAX_AUTO_CURRY_ARG_COUNT).map {|i| curry_generator(i) }.join("\n\n"),
    functions.map { |f| generate_curried_function(f) }.join("\n\n"),
    functions.map { |f| generate_flipped_function(f) }.join("\n\n"),
    functions.map { |f| generate_flipped_and_curried_function(f) }.join("\n\n"),
  "}"
].join("\n\n")

File.open("#{File.dirname(__FILE__)}/Dollar/AutoCurry.swift", "w") do |file|
  file.write(funcs)
end
